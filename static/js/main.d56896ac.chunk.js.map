{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["buttonData","keyCode","key","id","src","App","props","state","keyData","audioVol","playAudioOnClick","bind","playAudioOnKeyDown","changeVol","document","addEventListener","this","audioTag","map","item","i","length","getElementById","volume","removeEventListener","e","target","children","play","innerHTML","KEY_DATA","filter","setState","value","BUTTONS","onClick","className","preload","onChange","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d56896ac.chunk.js","sourcesContent":["import React from \"react\";\n\nconst buttonData = [\n  {\n    keyCode: 81,\n    key: \"Q\",\n    id: \"Heater-1\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\n  },\n  {\n    keyCode: 87,\n    key: \"W\",\n    id: \"Heater-2\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\n  },\n  {\n    keyCode: 69,\n    key: \"E\",\n    id: \"Heater-3\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\n  },\n  {\n    keyCode: 65,\n    key: \"A\",\n    id: \"Heater-4\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\n  },\n  {\n    keyCode: 83,\n    key: \"S\",\n    id: \"Clap\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\n  },\n  {\n    keyCode: 68,\n    key: \"D\",\n    id: \"Open-HH\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\n  },\n  {\n    keyCode: 90,\n    key: \"Z\",\n    id: \"Kick-n'-Hat\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\n  },\n  {\n    keyCode: 88,\n    key: \"X\",\n    id: \"Kick\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\n  },\n  {\n    keyCode: 67,\n    key: \"C\",\n    id: \"Closed-HH\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\n  },\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      keyData: buttonData,\n      audioVol: 50,\n    };\n    this.playAudioOnClick = this.playAudioOnClick.bind(this);\n    this.playAudioOnKeyDown = this.playAudioOnKeyDown.bind(this);\n    this.changeVol = this.changeVol.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.playAudioOnKeyDown);\n\n    const audioTag = this.state.keyData.map((item) => item.key);\n    for (let i = 0; i < audioTag.length; i++) {\n      document.getElementById(audioTag[i]).volume = this.state.audioVol / 100;\n    }\n  }\n  componentWillMount() {\n    document.removeEventListener(\"keydown\", this.playAudioOnKeyDown);\n  }\n  playAudioOnClick(e) {\n    e.target.children[0].play();\n    document.getElementById(\"display\").innerHTML = e.target.id;\n  }\n  playAudioOnKeyDown(e) {\n    switch (e.keyCode) {\n      case 81:\n      case 87:\n      case 69:\n      case 65:\n      case 83:\n      case 68:\n      case 90:\n      case 88:\n      case 67:\n        const KEY_DATA = this.state.keyData\n          .filter((item) => item.keyCode === e.keyCode)\n          .map((item) => [item.key, item.id]);\n        document.getElementById(KEY_DATA[0][0]).play();\n        document.getElementById(\"display\").innerHTML = KEY_DATA[0][1];\n        return;\n      default:\n        return;\n    }\n  }\n  changeVol(e) {\n    this.setState({\n      audioVol: e.target.value,\n    });\n\n    const audioTag = this.state.keyData.map((item) => item.key);\n    for (let i = 0; i < audioTag.length; i++) {\n      document.getElementById(audioTag[i]).volume = this.state.audioVol / 100;\n    }\n  }\n  render() {\n    const BUTTONS = this.state.keyData.map((item) => {\n      return (\n        <button\n          onClick={this.playAudioOnClick}\n          key={item.keyCode}\n          id={item.id}\n          className=\"drum-pad\"\n        >\n          {item.key}\n          <audio\n            preload=\"auto\"\n            id={item.key}\n            className=\"clip\"\n            src={item.src}\n          ></audio>\n        </button>\n      );\n    });\n\n    return (\n      <div id=\"drum-machine\">\n        <div id=\"buttons-wrapper\">{BUTTONS}</div>\n        <div id=\"dashboard\">\n          <div id=\"display-wrapper\">\n            <h2 id=\"display\"></h2>\n          </div>\n          <input\n            onChange={this.changeVol}\n            type=\"range\"\n            value={this.state.audioVol}\n          />\n          <div id=\"volume-wrapper\">\n            <h2 id=\"volume\">{this.state.audioVol}</h2>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}